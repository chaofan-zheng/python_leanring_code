前情回顾

1. 孤儿进程和僵尸进程

2. 自定义进程类
   继承Process
   重写__init__
   重写 run

3. 进程池 （大量的源源不断产生新进程事件）
   Pool()
   apply_async()
   close()
   join()

4. 消息队列

   Queue(5)
   q.put()
   q.get()
   q.close()

=================================

群聊聊天室分析

需求分析：
    有人进入聊天室需要输入姓名，姓名不能重复
    有人进入聊天室时，其他人会收到通知：xxx 进入了聊天室
    一个人发消息，其他人会收到：xxx ： xxxxxxxxxxx
    有人退出聊天室，则其他人也会收到通知:xxx退出了聊天室

     c / s

     启动服务端
     客户端启动即要进入聊天室

技术分析
   * 服务端需要存用户信息： 姓名 通信地址
     {name:address}

     [(name,address),....]

     class User:
         def __init__(self,name,address):
             self.name = name
             self.address = address

   * 网络通信 ：　ｕｄｐ
   * 转发模型:每个客户端由不同的进程负责收发


功能拆分和封装结构的决定

   函数编程

   进入聊天室
   聊天
   退出聊天室

网络通信协议设定
               请求类型    数据参量
   进入聊天室     LOGIN     name
   聊天          CHAT     name 消息内容
   退出聊天室     EXIT      name

分功能逻辑讨论

  逻辑结构模型 + 各个功能模块

  逻辑结构模型 （网络接收请求-》分情况讨论）
      服务端：  udp套接字
              循环接收请求
              分情况讨论

      客户端 ： 创建udp套接字


  进入聊天室
     客户端：
        输入姓名
        发送给服务端
        等待接收结果 OK  FAIL
     服务端：
         接收请求消息
         判断用户是否可以进入
         发送判断结果 OK  FAIL
         OK -> 存储用户，告知其他人

  聊天
     客户端：
         创建子进程
         父进程循环输入发送
         子进程循环接收打印

     服务端：
          接收请求
          将消息转发给其他人
          name : xxxxx

  退出聊天室

优化完善
  打印显示整理

练习1 ：
现在有500车票 记为 T1 -- T500
共有10个窗口同时买票 W1--W10

编写一个程序模拟买票过程
卖出一张则打印  w1 -----  T200
卖出后要隔 0.1 秒才能出下一张
卖空为止


作业： 1. 线程创建方法要掌握
      2. 聊天室总结







