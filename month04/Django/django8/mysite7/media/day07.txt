一 缓存
    1.  缓存的使用场景
         数据变化的频率不高。
    2. 使用缓存注意的问题
         注意保持缓存数据和原有的数据的一致性。如果保持一致性呢？
         当数据发生变更时，要清除缓存。这样的话，用户再次访问时，会生成新的缓存。
    3. Django中使用缓存的方式有3种，常用的是第一种，数据库缓存。
        目前讲解时，咱们使用的mysql，但是未来，会换成redis(基于内存的数据库)。
        3.1 在配置文件中添加缓存配置
        3.2 执行迁移命令
              python3 manage.py migrate
        3.3 生成缓存表
              python3 manage.py createcachetable
        3.4 整体(整页)缓存
              缓存的是视图函数的返回值。
              缺点： 不能只缓存部分数据   很难在有效值内删除缓存
        3.5 api缓存(部分缓存) 
              优点:可以缓存 部分数据，不需要时，可以及时删除
              另外：存储的值可以是任意对象，【内部提供了序列化的操作】
              cache.set/get/delete
              cache.set_many/get_many/delete_many
              删除不存在的key不会报错！
     4. 浏览器缓存（作为了解内容）
         4.1 强缓存(一定会缓存的)
           
         4.2 协商缓存 
二 中间件(掌握的内容) 
     1. Django中中间的实现
         编写中间件类，并重写父类的方法。然后注册中间件类。
       


